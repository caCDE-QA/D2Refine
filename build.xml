<?xml version="1.0" encoding="UTF-8"?>

<!--+
    |
    |  OpenRefine Extension D2Refine Extension Build File    
    |                
    +-->
    
<project name="D2Refine" default="build" basedir="."
	xmlns:ivy="antlib:org.apache.ivy.ant">

    <property environment="env"/>
	<property name="java_version" value="1.7"/>
    <condition property="version" value="trunk">
        <not><isset property="version"/></not>
    </condition>

    <condition property="revision" value="rXXXX">
        <not><isset property="revision"/></not>
    </condition>

    <condition property="full_version" value="0.0.0.1">
        <not><isset property="full_version"/></not>
    </condition>

    <condition property="dist.dir" value="dist">
        <not><isset property="dist.dir"/></not>
    </condition>

    <property name="fullname" value="${name}-${version}-${revision}" />
    
    <property name="refine.dir" value="${basedir}/../../main" />
    <property name="refine.webinf.dir" value="${refine.dir}/webapp/WEB-INF" />
    <property name="refine.modinf.dir" value="${refine.dir}/webapp/modules/core/MOD-INF" />
    <property name="refine.classes.dir" value="${refine.webinf.dir}/classes" />
    <property name="refine.lib.dir" value="${refine.webinf.dir}/lib" />
    <property name="server.dir" value="${basedir}/../../server" />
    <property name="server.lib.dir" value="${server.dir}/lib" />
    
    <property name="src.dir" value="${basedir}/src" />
    <property name="module.dir" value="${basedir}/module" />
    <property name="modinf.dir" value="${module.dir}/MOD-INF" />
    <property name="lib.dir" value="${modinf.dir}/lib" />
    <property name="classes.dir" value="${modinf.dir}/classes" />
	
	<property name="ivy.home" value="${user.home}/my_installations/ivy"/>
	
	<!-- Third party libraries locations, versions.
	     These libraries must be downloaded from their 
	     Maven repository locations -->
	
	<property name="maven-repo.dir" value="${user.home}/.m2/repository" />
	
	<!-- Properties for deploy and release mechanism -->
	<property name="openrefine.extensions.dir" value="${user.home}/Library/Application Support/OpenRefine/extensions" />
	<property name="D2Refine.git.dir" value="${user.home}/A123/git/Guoqian/D2Refine" />
			
    <path id="class.path">
        <fileset dir="${lib.dir}" erroronmissingdir="false">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${refine.lib.dir}">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${server.lib.dir}">
            <include name="**/*.jar" />
        </fileset>
        <pathelement path="${refine.classes.dir}"/>
    </path>
	            
    <target name="build_java">
        <mkdir dir="${classes.dir}" />
        <javac source="${java_version}" target="${java_version}" encoding="utf-8" destdir="${classes.dir}" debug="true" includeAntRuntime="no">
            <src path="${src.dir}"/>
            <classpath refid="class.path" />
        </javac>
    </target>

    <target name="build" depends="resolve, build_java" >
    	<tstamp>
    		<format property="timestmp" pattern="MM/dd/yyyy hh:mm:ss aa" unit="hour"/>
    	</tstamp>
        <echo message="Building D2Refine...${timestmp}" />
    	<zip destfile="../D2Refine/D2Refine.zip" basedir="../D2Refine/module" />
    	<echo message="Deploying the extension to ${openrefine.extensions.dir}" />    	
    	<unzip src="./D2Refine.zip" dest="${openrefine.extensions.dir}/D2Refine" overwrite="true" />
    	
    	<copy todir="${D2Refine.git.dir}" overwrite="true">
    	    <fileset dir="../D2Refine">
    	    	<!--exclude name="build.xml"/-->
    		</fileset>
    	</copy>
    </target>
	
	<target name="ivy-clean-cache" 
		description="removes the local Ivy cache. WARNING! After removal, this may take significant time to rebuild. Only use this if you are having problems with a corrupt or stale cache.">
		<ivy:cleancache/>
	</target>
	
	<target name="resolve" description="--> retrieve dependencies with ivy">
			<ivy:retrieve pattern="${lib.dir}/[artifact].[revision](-[classifier]).[ext]"/>
	 </target>
	
    <target name="clean">
        <delete dir="${classes.dir}" />
    </target>
</project>
